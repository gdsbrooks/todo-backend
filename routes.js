
const Routes =
    [
        {
            method: 'GET',
            path: '/todos',
            options: {
                description: 'Get Todos',
                notes: 'Retrieves all todos. Optionally filters by state (All/Complete/Incomplete) and orders by description / created_at / completed_at',
                tags: ['api'],
                handler: (request, h) => {

                    const filter = request.query.filter
                    const orderBy = request.query.orderBy

                    //  GET /todos?filter=<STATE>&orderBy=<FIELD></FIELD>
                }
            }
        },
        {
            method: 'POST',
            path: '/todos',
            options: {
                description: 'Post New Todo',
                notes: 'adds a new todo with the description entered. Todo is stored with and id, created_at date, completed_at data(null) and state(incomplete)',
                tags: ['api'],
                handler: (request, h) => {

                    const newTodo = request.payload


                }
            }
        },
        {
            method: 'PATCH',
            path: '/todo/{id}',
            options: {
                description: 'Update Todo',
                notes: 'Can modify state to complete or update the description. If todo state is complete, it will reject with HTTP erro code 400',
                tags: ['api'],
                handler: (request, h) => {

                    const patchTodo = request.params.id

                }
            }
        },
        {
            method: 'DELETE',
            path: '/todo/{id}',
            options: {
                description: 'Delete Todo',
                notes: 'Removes specificed Todo from database',
                tags: ['api'],
                handler: (request, h) => {

                    const deleteTodo = request.params.id

                }
            }
        },
        {
            method: 'GET',
            path: '/docs',
            options: {
                description: 'API Docs',
                notes: 'redirects to hapi-swagger autogenerated API documentation',
                tags: ['helper'],
                handler: (request, h) => {

                    return h.redirect('/documentation')

                }
            }
        },
        {
            method: '*',
            path: '/{any*}',
            options: {
                description: '404 Error Response',
                notes: 'Response whenever the requested route is not found',
                tags: ['helper'],
                handler: (request, h) => {
                    return h.response('Error 404: Oh no! That couldn\'t be found').code(404)
                }
            }
        }
    ]

module.exports = Routes  